import re
import pyperclip
from langdetect import detect
from deep_translator import GoogleTranslator
from keybert import KeyBERT
from sentence_transformers import SentenceTransformer
model = SentenceTransformer('all-MiniLM-L6-v2')
 
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –æ–¥–∏–Ω —Ä–∞–∑
kw_model = KeyBERT(model=SentenceTransformer('all-MiniLM-L6-v2'))
 
# –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏ —Ä—É—Å—Å–∫–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
EN_STOP_WORDS = {
    'a', 'an', 'the', 'and', 'or', 'but', 'as', 'with', 'without',
    'to', 'from', 'by', 'in', 'on', 'at', 'for', 'of', 'into', 'over', 'under',
    'through', 'during', 'before', 'after', 'between', 'about', 'around',
}
 
RU_STOP_WORDS = {
    '–∏', '–≤', '–Ω–∞', '–ø–æ', '—Å', '—Å–æ', '–±–µ–∑', '–∏–∑', '–æ—Ç', '–¥–æ', '—É', '–∑–∞', '–æ',
    '–æ–±', '–ø—Ä–æ', '–¥–ª—è', '–º–µ–∂–¥—É', '–ø—Ä–∏', '–Ω–∞–¥', '–ø–æ–¥', '—á–µ—Ä–µ–∑', '–≤–æ', '–∫–∞–∫', '–Ω–æ', '–∞'
}
 
def detect_language(text):
    try:
        return detect(text)
    except:
        return 'en'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 
def translate_if_needed(text):
    word_count = len(text.strip().split())
 
    try:
        lang = detect(text)
    except:
        lang = 'unknown'
 
    # –ï—Å–ª–∏ –º–∞–ª–æ —Å–ª–æ–≤ –∏–ª–∏ —è–∑—ã–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω ‚Äî —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥
    if lang == 'ru' or lang == 'unknown' or word_count <= 4:
        try:
            return GoogleTranslator(source='ru', target='en').translate(text)
        except:
            pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ ‚Äî –≤–µ—Ä–Ω—ë–º –∫–∞–∫ –µ—Å—Ç—å
 
    return text
 
def clean_keywords(keywords, stop_words, min_len=3):
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    result = []
    for word, _ in keywords:
        word = re.sub(r'[^\w]', '', word.lower())
        if word and len(word) >= min_len and word not in stop_words:
            result.append(word)
    return result
 
def smart_snake_case(text, max_words=5):
    keywords = kw_model.extract_keywords(text, top_n=15, stop_words='english')
    stop_words = EN_STOP_WORDS  # –ø–æ—Å–∫–æ–ª—å–∫—É —Ç–µ–∫—Å—Ç —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω
    cleaned = clean_keywords(keywords, stop_words)
    return '_'.join(cleaned[:max_words])
 
def main():
    print("üí° –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
    while True:
        try:
            user_input = input("> ").strip()
            if not user_input:
                continue
            translated = translate_if_needed(user_input)
            result = smart_snake_case(translated)
            pyperclip.copy(result)
            print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: {result}\n")
        except KeyboardInterrupt:
            print("\nüö™ –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            break
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}\n")

def api_function(user_input):
    try:
        if not user_input:
            return 
        translated = translate_if_needed(user_input)
        result = smart_snake_case(translated)
        return result
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}\n"
    

 
if __name__ == "__main__":
    main()